#!/bin/bash

# for build various linux kernel (cross-compile).
# this script has to move in kernel's top path.
# written by Steve Jeong (how2soft@gmail.com).

set -e

# path
TOP_PATH="$(pwd -P)"
OUT_PATH=${TOP_PATH}/out
LOG_PATH=${TOP_PATH}/build_log.txt

request() {
  echo ""
  echo "[kernel build $1]"
  read -r -p "Input $1: " $1
}

# Options
for opt in $@; do
  case ${opt} in
    --pre=*) # Add "-save-temps=objs" in KBUILD_CFLAGS of Makefile.
    PREPROCESS_FILE=${opt#*=}
    echo "preprocess file:${PREPROCESS_FILE}"
    ;;
    *)
    ;;
  esac
done

# Configure
request "architecture"
case ${architecture} in
  arm)
  export ARCH="arm"
  export CROSS_COMPILE="arm-linux-gnueabi-"
  ;;
  armhf)
  export ARCH="arm"
  export CROSS_COMPILE="arm-linux-gnueabihf-"
  ;;
  arm64)
  export ARCH="arm64"
  export CROSS_COMPILE="aarch64-linux-gnu-"
  ;;
  *)
  echo "architecture: Invalid Option"
  ;;
esac

request "config"
CONF_FILE=arch/${ARCH}/configs/${config}

request "target"
if [ ${target} == "all" ]; then
  target=""
fi

# Build
if [ ! -f ${CONF_FILE} ]; then
  echo "Check existing config file or pwd: ROOT path of Linux kernel!"
  exit 1
else
  if [ -f ".scmversion" ]; then
    sed -i 's/.*CONFIG_LOCALVERSION_AUTO.*/CONFIG_LOCALVERSION_AUTO=y/g' ${CONF_FILE}
  fi
  make O=${OUT_PATH} ${config}
  make ${PREPROCESS_FILE} O=${OUT_PATH} ${target} -j4 2>&1 | tee ${LOG_PATH}
fi

# vim: ft=sh ts=2 sw=2 sts=2 et
