#!/bin/bash

# Copyright (C) 2024 Steve Jeong <steve@how2flow.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>

set -e

# ftracing script.
# kernel function call stack. run with root permission.
# check kernel config...
# CONFIG_FTRACE=y
# CONFIG_DYNAMIC_FTRACE=y
# CONFIG_FUNCTION_TRACER=y
# CONFIG_FUNCTION_GRAPH_TRACER=y
# CONFIG_IRQSOFF_TRACER=y
# CONFIG_SCHED_TRACER=y
# CONFIG_FUNCTION_PROFILER=y
# CONFIG_STACK_TRACER=y
# CONFIG_TRACER_SNAPSHOT=y
# ...
# written by Steve Jeong (steve@how2flow.net).

DEFAULT=$(pwd -P)
DUMMY=kernel_init
PREFIX=/sys/kernel/debug/tracing

query_events() {
  local flag
  local events

  while true; do
    cd ${PREFIX}/events
    read -e -p "Enable some kernel events? ${PREFIX}/events/: " events
    if [ -f ${PREFIX}/events/${events} ]; then
      echo 1 > ${PREFIX}/events/${events}
    elif [ -z ${events} ]; then
      echo "Move on without setting the event."
    else
      echo "Invalid events ..."
      continue
    fi

    read -r -p "Have you finished setting up the evnets ([Y]es/[n]o)? :" flag
    case ${flag} in
      [Nn][Oo]|[Nn])
        echo ""
        continue
        ;;
      *)
        cd ${DEFAULT}
        break
        ;;
    esac
  done
}

query_functions() {
  local flag
  local function

  while true; do
    read -r -p "Add the kernel function filter (e.g. hrtimer_interrupt): " function
    if [ -z ${function} ]; then
      echo ${DUMMY} > ${PREFIX}/set_ftrace_filter
    else
      if [ $(grep -c ${function} ${PREFIX}/available_filter_functions) -gt 0 ]; then
        echo ${function} > ${PREFIX}/set_ftrace_filter
      else
        echo "Invalid Function Filter.."
        echo ""
        continue
      fi
    fi

    read -r -p "Have you finished setting up the filter ([Y]es/[n]o)? :" flag
    case ${flag} in
      [Nn][Oo]|[Nn])
        echo ""
        continue
        ;;
      *)
        break
        ;;
    esac
  done
}

init_ftrace() {
  local init

  # Ftrace off
  echo 0 > ${PREFIX}/tracing_on
  echo "Tracing off ..."
  sleep 1
  echo 0 > ${PREFIX}/events/enable
  echo "Disable events ..."
  sleep 1

  echo ${DUMMY} > ${PREFIX}/set_ftrace_filter
  sleep 1

  # Default options
  echo 1 > ${PREFIX}/options/func_stack_trace
  echo 1 > ${PREFIX}/options/sym-offset
  echo "Init defualt options ... OK"
}

get_ftrace() {
  echo 0 > ${PREFIX}/tracing_on
  echo "Trace off for get logs ..."
  sleep 3
  cp ${PREFIX}/trace ./trace.log
  chmod +r ./trace.log
}

set_ftrace() {

  # Set tracer
  read -r -p "Init current_tracer (default: function) ? :" init
  case ${init} in
    nop|function|function_graph)
      echo ${init} > ${PREFIX}/current_tracer
      ;;
    *)
      echo function > ${PREFIX}/current_tracer
      ;;
  esac
  echo "Set current_tracer ... OK"
  echo ""

  # Query things
  echo "Set events"
  query_events
  echo ""
  echo "Set function filter"
  query_functions
  echo ""

  # Ftrace on
  echo 1 > ${PREFIX}/events/enable
  echo "Enable events ..."
  sleep 1
  echo 1 > ${PREFIX}/tracing_on
  echo "Trace on ..."
  sleep 1

}

# EUID
if [ $EUID -ne 0 ]; then
  echo "please run as 'root'"
  exit 1
fi

echo " === [Initialize Ftrace] ==="
init_ftrace
echo ""

read -r -p "How would you use ftrace ([G]et/[S]et) ?: " OPTION
echo ""
case ${OPTION} in
  [Ss][Ee][Tt]|[Ss])
    echo "=== [Set Ftrace] ==="
    set_ftrace
    echo ""
    ;;
  *)
    echo "=== [Get Ftrace] ==="
    get_ftrace
    echo ""
    ;;
esac

# vim: ft=sh ts=2 sw=2 sts=2 et
